pipeline {
    agent {
        label 'AGENT-1'
    }

    parameters {
        choice(name: 'ACTION', choices: ['apply', 'destroy'], description: 'Pick something')
    }

    options {
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }

    stages {
        stage('INIT and PLAN') {
            steps {
                withAWS(credentials: 'aws-cred', region: 'us-east-1') {
                    sh """
                        cd 10-sg
                        terraform init -reconfigure
                        terraform plan -out=tfplan
                    """
                }
            }
        }

        stage('Apply or Destroy') {
            steps {
                withAWS(credentials: 'aws-cred', region: 'us-east-1') {
                    sh """
                        cd 10-sg
                        if [ "${params.ACTION}" = "apply" ]; then
                            terraform apply -auto-approve tfplan
                        elif [ "${params.ACTION}" = "destroy" ]; then
                            terraform destroy -auto-approve
                        fi
                    """
                }
            }
        }

         stage('Destroy VPC') {
            when{
                expression { params.ACTION == 'destroy' }
            }
            steps {
                build job: '00-vpc', wait: false, parameters: [
                    string(name: 'ACTION', value: "destroy")
                ]
            }
        }

        stage('Parallel-1') {
             when{
                expression { params.ACTION == 'apply' }
            }
            parallel {
                stage('Bastion') {
                    steps {
                        build job: '20-bastion', wait: false, parameters: [
                    string(name: 'ACTION', value: "apply")
                ]
                        
                    }
                }
                stage('EKS') {
                    steps {
                        build job: '40-eks', wait: false, parameters: [
                    string(name: 'ACTION', value: "apply")
                ]
                    }
                }
                stage('ECR') {
                    steps {
                        build job: '70-acr', wait: false, parameters: [
                    string(name: 'ACTION', value: "apply")
                ]
                    }
                }
                
    }
        }


        stage('Parallel-2') {
             when{
                expression { params.ACTION == 'apply' }
            }
            parallel {
                stage('ACM') {
                    steps {
                        build job: '50-acm', wait: true, parameters: [
                    string(name: 'ACTION', value: "apply")
                ]
                        
                    }
                }
                stage('ALB') {
                    steps {
                        build job: '60-alb', wait: false, parameters: [
                    string(name: 'ACTION', value: "apply")
                ]
                    }
                }
                stage('CDN') {
                    steps {
                        build job: '80-cdn', wait: false, parameters: [
                    string(name: 'ACTION', value: "apply")
                ]
                    }
                }
                
    }
        }

    }

    post {
        always {
            deleteDir()
        }
        success {
            echo 'this section runs when pipeline success'
        }
        failure {
            echo 'this section runs when pipeline failure'
        }
    }
}
