pipeline {
    agent {
        label 'AGENT-1'
    }

    parameters {
        choice(name: 'ACTION', choices: ['apply', 'destroy'], description: 'Pick something')
    }

    options {
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }

    stages {
        stage('INIT and PLAN') {
            steps {
                withAWS(credentials: 'aws-cred', region: 'us-east-1') {
                    sh """
                        cd 80-cdn
                        terraform init -reconfigure
                        terraform plan -out=tfplan
                    """
                }
            }
        }

        stage('Apply or Destroy') {
            steps {
                withAWS(credentials: 'aws-cred', region: 'us-east-1') {
                    sh """
                        cd 80-cdn 
                        if [ "${params.ACTION}" = "apply" ]; then
                            terraform apply -auto-approve tfplan
                        elif [ "${params.ACTION}" = "destroy" ]; then
                            terraform destroy -auto-approve
                        fi
                    """
                }
            }
        }

         stage('Destroy'){
            when {
                expression { params.ACTION == 'destroy' }
            }
            steps{
                withAWS(region: 'us-east-1', credentials: 'aws-cred') {
                    script {
                        def directories = ['80-cdn', '70-acr', '60-alb', '50-acm', '40-eks',  '20-bastion', '10-sg', '00-vpc']
                        for (dir in directories) {
                            echo "Destroying resources in directory: ${dir}"
                            sh """
                            cd ${dir}
                            terraform init -reconfigure
                            terraform destroy -auto-approve || { echo "Failed to destroy resources in ${dir}"; exit 1; }
                            cd ..
                            """
                        }
            }
                }
            }
        }

        
        }

    post {
        always {
            deleteDir()
        }
        success {
            echo 'this section runs when pipeline success'
        }
        failure {
            echo 'this section runs when pipeline failure'
        }
    }
}
